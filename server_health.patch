--- a/server.js
+++ b/server.js
@@ -6,8 +6,9 @@
 const path = require('path');

 const app = express();
-const PORT = process.env.PORT || 3000;
+const PORT = process.env.PORT || 3000;
+const HOST = process.env.HOST || '::'; // aceita IPv6 (e geralmente IPv4 também)
 
 // ===== PERSISTÊNCIA LOCAL =====
 const AUTH_BASE_DIR = process.env.AUTH_BASE_DIR || path.join(process.cwd(), 'auth_storage');
 // Ex.: em Docker/Railway: AUTH_BASE_DIR=/data
@@ -23,6 +24,16 @@
 app.use(cors());
 app.use(express.json());
 
+// --- Health / Root (para o Railway passar no healthcheck) ---
+app.get('/', (_req, res) => {
+  res.status(200).json({
+    ok: true,
+    service: 'baileys-api',
+    ts: new Date().toISOString(),
+  });
+});
+app.get('/health', (_req, res) => res.status(200).json({ ok: true }));
+
 // Estado global para múltiplas sessões
 // sessionId -> { sock, qrCode, isConnected, status, backupInterval }
 const sessions = new Map();
@@ -329,7 +340,8 @@
 }
 
 // Inicializar servidor
-app.listen(PORT, () => {
+app.listen(PORT, HOST, () => {
   console.log('🚀 Baileys API rodando na porta', PORT);
+  console.log('🌐 Host:', HOST);
   console.log('📦 AUTH_BASE_DIR:', AUTH_BASE_DIR);
   console.log('📱 Status: http://localhost:' + PORT + '/status?sessionId=SEU_ID');
   console.log('🔗 QR Code: http://localhost:' + PORT + '/qr?sessionId=SEU_ID');

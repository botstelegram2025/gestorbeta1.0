#!/usr/bin/env python3
"""
Script para corrigir conflitos cr√≠ticos do sistema
- Separar dados admin/usu√°rios
- Corrigir isolamento WhatsApp por usu√°rio
- Consertar templates duplicados
"""

import os
import sys
import psycopg2
from psycopg2.extras import RealDictCursor
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_connection():
    """Conectar ao banco"""
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        raise ValueError("DATABASE_URL n√£o configurada")
    
    conn = psycopg2.connect(database_url)
    conn.set_session(autocommit=True)
    return conn

def fix_user_isolation():
    """Corrigir isolamento entre usu√°rios"""
    conn = get_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    logger.info("üîß Corrigindo isolamento de usu√°rios...")
    
    # 1. Verificar e corrigir estrutura das tabelas
    logger.info("üìã Verificando estrutura das tabelas...")
    
    # Adicionar chat_id_usuario em templates se n√£o existir
    cursor.execute("""
        ALTER TABLE templates 
        ADD COLUMN IF NOT EXISTS chat_id_usuario BIGINT;
    """)
    
    # Adicionar chat_id_usuario em configuracoes se n√£o existir  
    cursor.execute("""
        ALTER TABLE configuracoes 
        ADD COLUMN IF NOT EXISTS chat_id_usuario BIGINT;
    """)
    
    # 2. Migrar templates globais para admin
    logger.info("üìÑ Migrando templates globais para admin...")
    cursor.execute("""
        UPDATE templates 
        SET chat_id_usuario = 1460561545 
        WHERE chat_id_usuario IS NULL;
    """)
    
    # 3. Migrar configuracoes globais para admin
    logger.info("‚öôÔ∏è Migrando configura√ß√µes globais para admin...")
    cursor.execute("""
        UPDATE configuracoes 
        SET chat_id_usuario = 1460561545 
        WHERE chat_id_usuario IS NULL;
    """)
    
    # 4. Verificar usu√°rios problem√°ticos
    cursor.execute("SELECT chat_id, nome FROM usuarios WHERE nome LIKE '/%' OR nome = ''")
    usuarios_problematicos = cursor.fetchall()
    
    for usuario in usuarios_problematicos:
        logger.warning(f"‚ö†Ô∏è Usu√°rio problem√°tico: {usuario['chat_id']} - {usuario['nome']}")
        
        # Limpar dados relacionados
        cursor.execute("DELETE FROM templates WHERE chat_id_usuario = %s", (usuario['chat_id'],))
        cursor.execute("DELETE FROM configuracoes WHERE chat_id_usuario = %s", (usuario['chat_id'],))
        cursor.execute("DELETE FROM clientes WHERE chat_id_usuario = %s", (usuario['chat_id'],))
        cursor.execute("DELETE FROM usuarios WHERE chat_id = %s", (usuario['chat_id'],))
        
        logger.info(f"‚úÖ Usu√°rio {usuario['chat_id']} removido")
    
    cursor.close()
    conn.close()
    
    logger.info("‚úÖ Isolamento de usu√°rios corrigido!")

def fix_whatsapp_isolation():
    """Corrigir isolamento do WhatsApp por usu√°rio"""
    conn = get_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    logger.info("üì± Corrigindo isolamento WhatsApp...")
    
    # Adicionar campo user_id em whatsapp_sessions se n√£o existir
    cursor.execute("""
        ALTER TABLE whatsapp_sessions 
        ADD COLUMN IF NOT EXISTS user_id BIGINT DEFAULT NULL;
    """)
    
    # Marcar sess√µes existentes como do admin
    cursor.execute("""
        UPDATE whatsapp_sessions 
        SET user_id = 1460561545 
        WHERE user_id IS NULL;
    """)
    
    # Criar √≠ndice para performance
    cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_whatsapp_sessions_user_id 
        ON whatsapp_sessions(user_id);
    """)
    
    cursor.close()
    conn.close()
    
    logger.info("‚úÖ Isolamento WhatsApp corrigido!")

def fix_template_system():
    """Corrigir sistema de templates para isolamento por usu√°rio"""
    conn = get_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    logger.info("üìù Corrigindo sistema de templates...")
    
    # Verificar templates duplicados
    cursor.execute("""
        SELECT nome, COUNT(*) as total, array_agg(chat_id_usuario) as usuarios
        FROM templates 
        GROUP BY nome 
        HAVING COUNT(*) > 1;
    """)
    
    duplicados = cursor.fetchall()
    
    for dup in duplicados:
        logger.warning(f"‚ö†Ô∏è Template duplicado: {dup['nome']} - Usu√°rios: {dup['usuarios']}")
        
        # Manter apenas do admin, remover dos outros usu√°rios
        cursor.execute("""
            DELETE FROM templates 
            WHERE nome = %s AND chat_id_usuario != 1460561545
        """, (dup['nome'],))
        
        logger.info(f"‚úÖ Duplicados removidos para: {dup['nome']}")
    
    # Atualizar constraint para permitir templates √∫nicos por usu√°rio
    cursor.execute("DROP INDEX IF EXISTS templates_nome_key")
    cursor.execute("""
        CREATE UNIQUE INDEX IF NOT EXISTS templates_nome_usuario_unique 
        ON templates(nome, chat_id_usuario);
    """)
    
    cursor.close()
    conn.close()
    
    logger.info("‚úÖ Sistema de templates corrigido!")

def fix_client_data():
    """Corrigir dados de clientes"""
    conn = get_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    logger.info("üë• Verificando dados de clientes...")
    
    # Verificar clientes sem usu√°rio v√°lido
    cursor.execute("""
        SELECT c.id, c.nome, c.chat_id_usuario, u.nome as usuario_nome
        FROM clientes c
        LEFT JOIN usuarios u ON c.chat_id_usuario = u.chat_id
        WHERE u.chat_id IS NULL;
    """)
    
    clientes_orfaos = cursor.fetchall()
    
    if clientes_orfaos:
        logger.warning(f"‚ö†Ô∏è {len(clientes_orfaos)} clientes √≥rf√£os encontrados")
        for cliente in clientes_orfaos:
            logger.warning(f"  - Cliente {cliente['id']}: {cliente['nome']} (usu√°rio: {cliente['chat_id_usuario']})")
            
            # Mover para admin temporariamente
            cursor.execute("""
                UPDATE clientes 
                SET chat_id_usuario = 1460561545 
                WHERE id = %s
            """, (cliente['id'],))
        
        logger.info("‚úÖ Clientes √≥rf√£os movidos para admin")
    
    cursor.close()
    conn.close()
    
    logger.info("‚úÖ Dados de clientes verificados!")

def generate_status_report():
    """Gerar relat√≥rio de status do sistema"""
    conn = get_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    logger.info("üìä Gerando relat√≥rio de status...")
    
    # Contar registros por tabela
    tabelas = ['usuarios', 'clientes', 'templates', 'configuracoes', 'whatsapp_sessions']
    
    for tabela in tabelas:
        cursor.execute(f"SELECT COUNT(*) as total FROM {tabela}")
        total = cursor.fetchone()['total']
        logger.info(f"  {tabela}: {total} registros")
    
    # Usu√°rios ativos
    cursor.execute("SELECT chat_id, nome, status FROM usuarios ORDER BY data_cadastro")
    usuarios = cursor.fetchall()
    
    logger.info("\nüë• Usu√°rios no sistema:")
    for user in usuarios:
        logger.info(f"  - {user['chat_id']}: {user['nome']} ({user['status']})")
    
    # Templates por usu√°rio
    cursor.execute("""
        SELECT chat_id_usuario, COUNT(*) as total_templates
        FROM templates 
        GROUP BY chat_id_usuario 
        ORDER BY chat_id_usuario
    """)
    templates_por_usuario = cursor.fetchall()
    
    logger.info("\nüìù Templates por usu√°rio:")
    for item in templates_por_usuario:
        cursor.execute("SELECT nome FROM usuarios WHERE chat_id = %s", (item['chat_id_usuario'],))
        usuario = cursor.fetchone()
        nome_usuario = usuario['nome'] if usuario else 'Usu√°rio n√£o encontrado'
        logger.info(f"  - {item['chat_id_usuario']} ({nome_usuario}): {item['total_templates']} templates")
    
    # Clientes por usu√°rio
    cursor.execute("""
        SELECT chat_id_usuario, COUNT(*) as total_clientes
        FROM clientes 
        GROUP BY chat_id_usuario 
        ORDER BY chat_id_usuario
    """)
    clientes_por_usuario = cursor.fetchall()
    
    logger.info("\nüë• Clientes por usu√°rio:")
    for item in clientes_por_usuario:
        cursor.execute("SELECT nome FROM usuarios WHERE chat_id = %s", (item['chat_id_usuario'],))
        usuario = cursor.fetchone()
        nome_usuario = usuario['nome'] if usuario else 'Usu√°rio n√£o encontrado'
        logger.info(f"  - {item['chat_id_usuario']} ({nome_usuario}): {item['total_clientes']} clientes")
    
    cursor.close()
    conn.close()
    
    logger.info("‚úÖ Relat√≥rio de status conclu√≠do!")

def main():
    """Executar todas as corre√ß√µes"""
    logger.info("üöÄ Iniciando corre√ß√µes do sistema...")
    
    try:
        # 1. Corrigir isolamento de usu√°rios
        fix_user_isolation()
        
        # 2. Corrigir isolamento WhatsApp
        fix_whatsapp_isolation()
        
        # 3. Corrigir sistema de templates
        fix_template_system()
        
        # 4. Corrigir dados de clientes
        fix_client_data()
        
        # 5. Gerar relat√≥rio
        generate_status_report()
        
        logger.info("üéâ Todas as corre√ß√µes conclu√≠das com sucesso!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro durante corre√ß√µes: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)